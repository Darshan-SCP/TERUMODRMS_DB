PROCEDURE "TERUMODRMS_DB.db.Procedure::TERUMO_RGA_CREATE"( 
	IN USER_ID NVARCHAR(100),
	IN BU_CODE NVARCHAR(50),
	IN BU_SUB_CODE NVARCHAR(100),
	IN DISTRIBUTOR_REASON NVARCHAR(100),
	-- IN ST_HEADER "TERUMODRMS_DB.db.Structure::ST_TERUMO_RGA_HEADER", 
	IN ST_ITEMS "TERUMODRMS_DB.db.Structure::ST_TERUMO_RGA_ITEMS", 
	IN ST_EVENTS "TERUMODRMS_DB.db.Structure::ST_TERUMO_RGA_EVENTS_COMMENTS", 
	OUT OUT_SUCCESS VARCHAR(100)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/

   -- Local Variables:
	DECLARE RGA_NO BIGINT;
	DECLARE CURR_TIMESTAMP TIMESTAMP;
	-- DECLARE BU_SUB_CODE NVARCHAR(50);
	DECLARE STATUS INTEGER;
	DECLARE APPROVER_LEVEL INTEGER;
	DECLARE APPROVER_ROLE NVARCHAR(50);
	-- DECLARE SALES_REP_ID NVARCHAR(100);
	DECLARE NEXT_APPROVER NVARCHAR(100);
	-- Event Values
	DECLARE EVENT_COUNT INTEGER;
	DECLARE EVENT_NO INTEGER;
	DECLARE EVENT_CODE NVARCHAR(30);
	DECLARE REMARK NVARCHAR(100); 
	
   
	   -- Local Variable values assigning
		SELECT "TERUMODRMS_DB.db.Sequence::TERUMO_RGA_NO".NEXTVAL INTO RGA_NO FROM "TERUMODRMS_DB.db::DUMMY";
		
		SELECT CURRENT_TIMESTAMP INTO CURR_TIMESTAMP FROM "TERUMODRMS_DB.db::DUMMY";
		
		STATUS := 6; --Pending for Approval
		APPROVER_LEVEL := 1; --SA
		-- APPROVER_ROLE := 'SA'; --SA
		
		SELECT "USER_ROLE" INTO APPROVER_ROLE FROM "TERUMODRMS_DB.db.Tables::TERUMO_RGA_MATRIX"
		WHERE "APPROVER_LEVEL" = :APPROVER_LEVEL;
		
		
		--Get Sales Associate ID using BU_SUB_CODE from SALESHIERARCHY_MATRIX
		SELECT "SALES_ASSO_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_SALESHIERARCHY_MATRIX"
		WHERE "BU_SUB_CODE" = :BU_SUB_CODE AND "BU_CODE" = :BU_CODE AND "DISTRIBUTOR_ID" = :USER_ID;
		
		
		-----Logic Change for Blank SA,SM and RH roles 11.11.2021
		IF (APPROVER_ROLE = 'SA' AND NEXT_APPROVER = '')
        THEN
        SELECT "SALES_MGR_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_SALESHIERARCHY_MATRIX"
        WHERE "DISTRIBUTOR_ID" = :USER_ID AND "BU_SUB_CODE" = :BU_SUB_CODE LIMIT 1;
        APPROVER_ROLE = 'SM';
        APPROVER_LEVEL = APPROVER_LEVEL + 1;
        END IF;
		
		IF (APPROVER_ROLE = 'SM' AND NEXT_APPROVER = '')
        THEN
        SELECT "SALES_REGIONALHEAD_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_SALESHIERARCHY_MATRIX"
        WHERE "DISTRIBUTOR_ID" = :USER_ID AND "BU_SUB_CODE" = :BU_SUB_CODE LIMIT 1;
        APPROVER_ROLE = 'RH';
        APPROVER_LEVEL = APPROVER_LEVEL + 1;
        END IF;

        IF (APPROVER_ROLE = 'RH' AND NEXT_APPROVER = '')
        THEN
        SELECT "BU_HEAD_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_BUSINESS_UNIT_MASTER"
        WHERE "BU_CODE" = :BU_CODE LIMIT 1;
        APPROVER_ROLE = 'BUH';
        APPROVER_LEVEL = APPROVER_LEVEL + 1;
        END IF;
		
		----------------------------------------------------------

	-- 1) Insert into Header:
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_RGA_HEADER" 
		("RGA_NO", "DISTRIBUTOR_ID", "DISTRIBUTOR_REASON", "STATUS", "APPROVER_LEVEL", "APPROVER_ROLE", "NEXT_APPROVER", "BU_CODE", "BU_SUB_CODE", "CREATED_ON")
		VALUES 	
		(:RGA_NO, :USER_ID, :DISTRIBUTOR_REASON, :STATUS, :APPROVER_LEVEL, :APPROVER_ROLE, :NEXT_APPROVER, :BU_CODE, "BU_SUB_CODE", :CURR_TIMESTAMP);
		-- COMMIT;
		
	-- 2) Insert into Items:
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_RGA_ITEMS" 
		(
			"RGA_NO", "RGA_ITEM_NO", "ITEM_CODE", "BATCH", "EXPIRY_DATE", "SALEABLE", "INVOICE_NO", "INVOICE_DATE",
			"INVOICE_QUANTITY", "PRICE", "EXTENDED", "RETURN_QUANTITY"
		)
		SELECT 	:RGA_NO, "RGA_ITEM_NO", "ITEM_CODE", "BATCH", "EXPIRY_DATE", "SALEABLE", "INVOICE_NO", "INVOICE_DATE",
			"INVOICE_QUANTITY", "PRICE", "EXTENDED", "RETURN_QUANTITY"
		FROM :ST_ITEMS;
		-- COMMIT;
		
	-- 3) Insert into Events Log:
		EVENT_NO := 1;
		EVENT_CODE := 1;
		REMARK := 'Created by Distributor - ' || :USER_ID;
		
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_RGA_EVENTS_COMMENTS" 
		(
			"RGA_NO", "EVENT_NO", "EVENT_CODE", "USER_ID", "USER_NAME", "USER_ROLE", "REMARK", "COMMENT", "CREATION_DATE"
		)
		SELECT 	:RGA_NO, :EVENT_NO, :EVENT_CODE, "USER_ID", "USER_NAME", "USER_ROLE", :REMARK, :DISTRIBUTOR_REASON, :CURR_TIMESTAMP
		FROM :ST_EVENTS;
		COMMIT;
	   
	   
   --OUT_SUCCESS := 'RGA Request Created Successfully';
   OUT_SUCCESS := 'RGA Request Created Successfully : ' || :RGA_NO;
	 
END