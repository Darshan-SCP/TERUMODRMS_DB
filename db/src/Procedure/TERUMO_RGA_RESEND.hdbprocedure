PROCEDURE "TERUMODRMS_DB.db.Procedure::TERUMO_RGA_RESEND"( 
	IN RGA_NO BIGINT,
	IN BU_CODE NVARCHAR(50),
	IN BU_SUB_CODE NVARCHAR(50),
	IN DISTRIBUTOR_REASON NVARCHAR(100),
	IN USER_ID NVARCHAR(100),
	IN CURR_APPROVER_ROLE NVARCHAR(50),
	IN ST_ITEMS "TERUMODRMS_DB.db.Structure::ST_TERUMO_RGA_ITEMS", 
	IN ST_EVENTS "TERUMODRMS_DB.db.Structure::ST_TERUMO_RGA_EVENTS_COMMENTS",
	OUT OUT_SUCCESS VARCHAR(100)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   -- Local Variables:
	DECLARE CURR_TIMESTAMP TIMESTAMP;
	DECLARE DIST_ID NVARCHAR(100);
	-- DECLARE BU_SUB_CODE NVARCHAR(50);
	DECLARE STATUS INTEGER;

	DECLARE NEXT_APPROVER_ROLE NVARCHAR(50);
	DECLARE NEXT_APPROVER_LEVEL INTEGER;
	DECLARE NEXT_APPROVER NVARCHAR(100);
	-- Event Values
	DECLARE EVENT_COUNT INTEGER;
	DECLARE EVENT_NO INTEGER;
	DECLARE EVENT_CODE NVARCHAR(30);
	DECLARE REMARK NVARCHAR(100);
	
	IF :CURR_APPROVER_ROLE = 'SA' -- Resend by Distributor
	THEN
		-- Get current timestamp
		SELECT CURRENT_TIMESTAMP INTO CURR_TIMESTAMP FROM "TERUMODRMS_DB.db::DUMMY";
		
		STATUS := 6; --Pending for Approval
		NEXT_APPROVER_LEVEL := 1; --SA
		NEXT_APPROVER_ROLE := 'SA';
	
	
		-- Get Distributor id from RGA Header
		SELECT "DISTRIBUTOR_ID" INTO DIST_ID FROM "TERUMODRMS_DB.db.Tables::TERUMO_RGA_HEADER"
		WHERE "RGA_NO" = :RGA_NO;
		
		--Get Sales Associate as Sendback Approver
		SELECT "SALES_ASSO_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_SALESHIERARCHY_MATRIX"
		WHERE "BU_SUB_CODE" = :BU_SUB_CODE AND "BU_CODE" = :BU_CODE AND "DISTRIBUTOR_ID" = :DIST_ID;
	
	
	   ------Logic change for blank approvers for SA,SM and RH
	   IF NEXT_APPROVER = '' -- blank SA
	   THEN
		SELECT "SALES_MGR_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_SALESHIERARCHY_MATRIX"
		WHERE "BU_SUB_CODE" = :BU_SUB_CODE AND "DISTRIBUTOR_ID" = :DIST_ID;
		NEXT_APPROVER_LEVEL = NEXT_APPROVER_LEVEL + 1;
		NEXT_APPROVER_ROLE = 'SM';
    	END IF;
    	
        IF NEXT_APPROVER = '' -- blank SM
	    THEN
     	SELECT "SALES_REGIONALHEAD_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_SALESHIERARCHY_MATRIX"
		WHERE "DISTRIBUTOR_ID" = :DIST_ID AND "BU_SUB_CODE" = :BU_SUB_CODE LIMIT 1;
		NEXT_APPROVER_LEVEL = NEXT_APPROVER_LEVEL + 1;
		NEXT_APPROVER_ROLE = 'RH';
    	END IF;
    	
    	IF NEXT_APPROVER = '' -- blank RH
	    THEN
     	SELECT "BU_HEAD_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_BUSINESS_UNIT_MASTER"
		WHERE "BU_CODE" = :BU_CODE LIMIT 1;
		NEXT_APPROVER_LEVEL = NEXT_APPROVER_LEVEL + 1;
		NEXT_APPROVER_ROLE = 'BUH';
    	END IF;
	
	
	-- 1) Update into Header:
		UPDATE "TERUMODRMS_DB.db.Tables::TERUMO_RGA_HEADER"
		SET "DISTRIBUTOR_REASON" = :DISTRIBUTOR_REASON, 
			"NEXT_APPROVER"= :NEXT_APPROVER, 
			"APPROVER_LEVEL" = :NEXT_APPROVER_LEVEL, 
			"APPROVER_ROLE" = :NEXT_APPROVER_ROLE, 
			"STATUS" = :STATUS
		WHERE "RGA_NO" = :RGA_NO;
	
	-- 2) Delete all existing items for the RGA_NO:
		DELETE FROM "TERUMODRMS_DB.db.Tables::TERUMO_RGA_ITEMS" WHERE "RGA_NO" = :RGA_NO;
		
	-- 3) Insert into Items:
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_RGA_ITEMS" 
		(
			"RGA_NO", "RGA_ITEM_NO", "ITEM_CODE", "BATCH", "EXPIRY_DATE", "SALEABLE", "INVOICE_NO", "INVOICE_DATE",
			"INVOICE_QUANTITY", "PRICE", "EXTENDED", "RETURN_QUANTITY"
		)
		SELECT 	:RGA_NO, "RGA_ITEM_NO", "ITEM_CODE", "BATCH", "EXPIRY_DATE", "SALEABLE", "INVOICE_NO", "INVOICE_DATE",
			"INVOICE_QUANTITY", "PRICE", "EXTENDED", "RETURN_QUANTITY"
		FROM :ST_ITEMS;
		-- COMMIT;
		
	
	-- 4) Insert into Events Log:
		SELECT COUNT(*) into EVENT_COUNT FROM "TERUMODRMS_DB.db.Tables::TERUMO_RGA_EVENTS_COMMENTS" WHERE "RGA_NO" = :RGA_NO;
		EVENT_NO := EVENT_COUNT + 1;
		EVENT_CODE := 7; --RGA Request Resent
		REMARK := 'Resent by Distributor - ' || :USER_ID;
		
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_RGA_EVENTS_COMMENTS" 
		(
			"RGA_NO", "EVENT_NO", "EVENT_CODE", "USER_ID", "USER_NAME", "USER_ROLE", "REMARK", "COMMENT", "CREATION_DATE"
		)
		SELECT 	:RGA_NO, :EVENT_NO, :EVENT_CODE, "USER_ID", "USER_NAME", "USER_ROLE", :REMARK, "COMMENT", :CURR_TIMESTAMP
		FROM :ST_EVENTS;
		COMMIT;
	
		OUT_SUCCESS := 'RGA Request Resubmitted Successfully : ' || :RGA_NO;
	
	ELSE
		OUT_SUCCESS := 'Invalid User Role for Resubmission.';
    END IF;
	
END