PROCEDURE "TERUMODRMS_DB.db.Procedure::TERUMO_ONBOARDING_RESEND"( 
	IN OB_NO BIGINT,
	IN BU_CODE NVARCHAR(50),
	IN USER_ID NVARCHAR(100),
	IN APPROVER_LEVEL INTEGER,
	IN CURR_APPROVER_ROLE NVARCHAR(50),
	IN ST_TARGET "TERUMODRMS_DB.db.Structure::ST_TERUMO_DISTRIBUTOR_OB_TARGETS",
	IN ST_PRICE "TERUMODRMS_DB.db.Structure::ST_TERUMO_DISTRIBUTOR_PRICING",
	IN ST_EVENTS "TERUMODRMS_DB.db.Structure::ST_TERUMO_DISTRIBUTOR_EVENTS_COMMENTS",
	OUT OUT_SUCCESS NVARCHAR(100)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   -- Local Variables:
	DECLARE CURR_TIMESTAMP TIMESTAMP;
	-- DECLARE BU_SUB_CODE NVARCHAR(50);
	DECLARE STATUS INTEGER;
	DECLARE INFO_CHECK BOOLEAN := FALSE;
	-- Next Approver details
	DECLARE NEXT_APPROVER_ROLE NVARCHAR(50);
	DECLARE NEXT_APPROVER_LEVEL INTEGER;
	DECLARE NEXT_APPROVER NVARCHAR(100);
	-- Event Values
	DECLARE EVENT_COUNT INTEGER;
	DECLARE EVENT_NO INTEGER;
	DECLARE EVENT_CODE NVARCHAR(30);
	DECLARE REMARK NVARCHAR(100);
	
	IF :CURR_APPROVER_ROLE = 'SA'
	THEN
		-- Get current timestamp
		SELECT CURRENT_TIMESTAMP INTO CURR_TIMESTAMP FROM "TERUMODRMS_DB.db::DUMMY";
		
		STATUS := 6; --Pending for Approval
		NEXT_APPROVER_LEVEL := :APPROVER_LEVEL + 1; --MKT
		
		-- Get Next Approver Role from next Approver level
		SELECT "USER_ROLE" INTO NEXT_APPROVER_ROLE FROM "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_MATRIX"
		WHERE "APPROVER_LEVEL" = :NEXT_APPROVER_LEVEL;
		
		-- Get Count for new EVENT_NO
		SELECT COUNT(*) into EVENT_COUNT FROM "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_EVENTS_COMMENTS" 
		WHERE "OB_NO" = :OB_NO;
		
		EVENT_NO := EVENT_COUNT + 1;
		EVENT_CODE := 6; -- 6	OB Request Resent
		REMARK := 'Resent by ' || :CURR_APPROVER_ROLE || ' - ' || :USER_ID;
		
		-- Get Marketing id as Next Approver
		SELECT "USER_ID" INTO NEXT_APPROVER FROM "TERUMODRMS_DB.db.Tables::TERUMO_USER_MASTER"
		WHERE "BU_CODE" = :BU_CODE AND "USER_ROLE" = NEXT_APPROVER_ROLE; --MKT
		
		
		-- 1) Update into Header:
		UPDATE "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_ONBOARDING"
		SET "BU_CODE" = :BU_CODE,
			"APPROVER_LEVEL" = :NEXT_APPROVER_LEVEL, 
			"APPROVER_ROLE" = :NEXT_APPROVER_ROLE, 
			"NEXT_APPROVER"= :NEXT_APPROVER, 
			"STATUS" = :STATUS, 
			"SALES_ASSOCIATE_ID" = :USER_ID,
			"SA_APPROVED_ON" = :CURR_TIMESTAMP,
			"LAST_UPDATED" = :CURR_TIMESTAMP
		WHERE "OB_NO" = :OB_NO;
		
		-- 2) Delete all existing items for the OB_NO from targets table:
		DELETE FROM "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_OB_TARGETS" WHERE "OB_NO" = :OB_NO;
		
		-- 3) Insert into Items:
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_OB_TARGETS" 
		(
			"OB_NO", "FIN_YEAR", "DIST_CREATED", "MONTH1", "MONTH2", "MONTH3", "MONTH4", "MONTH5", 
			"MONTH6", "MONTH7", "MONTH8", "MONTH9", "MONTH10", "MONTH11", "MONTH12"
		)
		SELECT 	:OB_NO, "FIN_YEAR", "DIST_CREATED", "MONTH1", "MONTH2", "MONTH3", "MONTH4", "MONTH5", 
			"MONTH6", "MONTH7", "MONTH8", "MONTH9", "MONTH10", "MONTH11", "MONTH12"
		FROM :ST_TARGET;
		
		
		-- 4) Delete all existing items for the OB_NO from Prcing details table:
		DELETE FROM "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_PRICING" WHERE "OB_NO" = :OB_NO;
		
		-- 5) Insert into Items:
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_PRICING" 
		(
			"OB_NO", "MATERIAL_CODE", "SALES_ORG", "DIST_CHANNEL", "PRICELIST_TYPE", "VALID_FROM", "VALID_TO",
			"REF_AMOUNT", "AMOUNT", "CURRENCY", "PER_UNIT", "UOM" 
		)
		SELECT 	:OB_NO, "MATERIAL_CODE", "SALES_ORG", "DIST_CHANNEL", "PRICELIST_TYPE", "VALID_FROM", "VALID_TO",
			"REF_AMOUNT", "AMOUNT", "CURRENCY", "PER_UNIT", "UOM" 
		FROM :ST_PRICE;
		
		
		-- 6) Insert into Events Log:
		INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_DISTRIBUTOR_EVENTS_COMMENTS" 
		(
			"OB_NO", "EVENT_NO", "EVENT_CODE", "USER_ID", "USER_NAME", "USER_ROLE", "REMARK", "COMMENT", "CREATION_DATE"
		)
		SELECT 	:OB_NO, :EVENT_NO, :EVENT_CODE, "USER_ID", "USER_NAME", "USER_ROLE", :REMARK, "COMMENT", :CURR_TIMESTAMP
		FROM :ST_EVENTS;
		COMMIT;
		
		
		OUT_SUCCESS := 'OB Request: ' || :OB_NO || ' Resubmitted by ' || :CURR_APPROVER_ROLE || ' - ' || :USER_ID;
	
	ELSE
		OUT_SUCCESS := 'Invalid User Role for Resubmission.';
    END IF;
   
   
END