PROCEDURE "TERUMODRMS_DB.db.Procedure::TERUMO_PAYMENT_HOLD"(
	IN LV_POP_NO BIGINT,
	IN CURR_APRROVER_ROLE NVARCHAR(10),
    IN ST_PY_EVENTSCOMMS "TERUMODRMS_DB.db.Structure::ST_TERUMO_PAYMENTS_EVENTS_COMMENTS",
	OUT OUT_SUCCESS VARCHAR(100)
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   -- Local Variables:
	DECLARE LV_DATE TIMESTAMP;
	DECLARE STATUS INTEGER;

	
DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "TERUMODRMS_DB.db::DUMMY";
/*DECLARE DEFAULT_FTYPE VARCHAR(100);*/
SELECT CURRENT_TIMESTAMP INTO LV_DATE FROM "TERUMODRMS_DB.db::DUMMY";
	
IF :CURR_APRROVER_ROLE = 'AR'
THEN
	STATUS := 10; --Hold by AR Team
	
		
		UPDATE "TERUMODRMS_DB.db.Tables::TERUMO_PAYMENTS"
		SET 
			"POP_STATUS" = :STATUS, 
			"LAST_UPDATED_DATE" = :LV_DATE
		WHERE "POP_NO" = :LV_POP_NO;
	
       -- For Events and Comments Table
INSERT INTO "TERUMODRMS_DB.db.Tables::TERUMO_PAYMENTS_EVENTS_COMMENTS" 
("POP_NO","EVENT_NO","EVENT_CODE","USER_ID","USER_ROLE","USER_NAME","COMMENTS","CRT_DATE"
)
SELECT 
:LV_POP_NO,"EVENT_NO","EVENT_CODE","USER_ID","USER_ROLE","USER_NAME","COMMENTS",:LV_DATE
FROM :ST_PY_EVENTSCOMMS;
COMMIT;

OUT_SUCCESS := 'Payment Request with ID ' || :LV_POP_NO || ' set to HOLD.';

ELSE
     OUT_SUCCESS := 'Request could not be completed';
END IF;		
	
END